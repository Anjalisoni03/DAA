//USING RECURSION

#include<stdio.h>
#include<limits.h>
int MCO(int c[],int i,int j)
{
  if(i==j)
  {
    return 0;
  }
  int k;
  int min=INT_MAX;
  int mul;
  for(k=i;k<j;k++)
  {
    mul=MCO(c,i,k)+MCO(c,k+1,j)+(c[i-1]*c[k]*c[j]);
    if (mul<min)
      min=mul;
  }
  return min;
}
int main()
{
  int arr[]={3,2,4,2,5};
  int n = sizeof(arr) / sizeof(arr[0]);
  printf("Minimum number of multiplications is %d ",MCO(arr,1,n-1));
  getchar();
  return 0;
}


//USING MEMOIZATION

#include <bits/stdc++.h>
using namespace std;
int dp[100][100];
 
// Function for matrix chain multiplication
int matrixChainMemoised(int* p, int i, int j)
{
    if (i == j)
    {
        return 0;
    }
    if (dp[i][j] != -1)
    {
        return dp[i][j];
    }
    dp[i][j] = INT_MAX;
    for (int k = i; k < j; k++)
    {
        dp[i][j] = min(dp[i][j], matrixChainMemoised(p, i, k)+ matrixChainMemoised(p, k + 1, j)+ p[i - 1] * p[k] * p[j]);
    }
    return dp[i][j];
}
int MatrixChainOrder(int* p, int n)
{
    int i = 1, j = n - 1;
    return matrixChainMemoised(p, i, j);
}
 
int main()
{
    int arr[] = { 1, 2, 3, 4 };
    int n = sizeof(arr) / sizeof(arr[0]);
    memset(dp, -1, sizeof dp);
 
    cout << "Minimum number of multiplications is "
         << MatrixChainOrder(arr, n);
}
